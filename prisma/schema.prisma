// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Divisi {
  div_id Int     @id @default(autoincrement())
  nama   String
  alias  String?
  jawab  Jawab[] @relation("div")
  d1     mDiv[]  @relation("d1")
  d2     mDiv[]  @relation("d2")
}

model Jawab {
  j_id    Int          @id @default(autoincrement())
  jawaban String
  nilai   Int
  d_key   Int
  t_key   Int
  s_key   Int
  divisi  Divisi       @relation(name: "div", fields: [d_key], references: [div_id], onDelete: Cascade)
  tanya   Tanya        @relation(name: "ask", fields: [t_key], references: [t_id], onDelete: Cascade)
  sub     Sub_kriteria @relation(name: "subkey", fields: [s_key], references: [sk_id], onDelete: Cascade)
}

model Kriteria {
    k_id Int            @id @default(autoincrement())
    nama String
    tipe String
    sub  Sub_kriteria[] @relation("k")
    k1   mKriteria[]    @relation("k1")
    k2   mKriteria[]    @relation("k2")
}

model mDiv {
  mk_id Int          @id @default(autoincrement())
  k1    Int
  k2    Int
  sub   Int
  subs  Sub_kriteria @relation(name: "skd", fields: [sub], references: [sk_id], onDelete: Cascade)
  div   Divisi       @relation(name: "d1", fields: [k1], references: [div_id], onDelete: Cascade)
  div2  Divisi       @relation(name: "d2", fields: [k2], references: [div_id], onDelete: Cascade)
  val   Float
}

model mKriteria {
  mk_id     Int      @id @default(autoincrement())
  k1        Int
  k2        Int
  kriteria  Kriteria @relation(name: "k1", fields: [k1], references: [k_id], onDelete: Cascade)
  kriteria2 Kriteria @relation(name: "k2", fields: [k2], references: [k_id], onDelete: Cascade)
  val       Float
}

model mSub {
  mk_id Int          @id @default(autoincrement())
  k1    Int
  k2    Int
  sub   Sub_kriteria @relation(name: "sk1", fields: [k1], references: [sk_id], onDelete: Cascade)
  sub2  Sub_kriteria @relation(name: "sk2", fields: [k2], references: [sk_id], onDelete: Cascade)
  val   Float
}

model Sub_kriteria {
    sk_id    Int      @id @default(autoincrement())
    nama     String
    kriteria Kriteria @relation(name: "k", fields: [k], references: [k_id], onDelete: Cascade)
    k        Int
    sk1      mSub[]   @relation("sk1")
    sk2      mSub[]   @relation("sk2")
    skd      mDiv[]   @relation("skd")
    j        Jawab[]  @relation("subkey")
}

model Tanya {
  t_id       Int     @id @default(autoincrement())
  pertanyaan String
  jawab      Jawab[] @relation("ask")
}

model User {
  id       Int    @id @default(autoincrement())
  uname    String @unique
  password String
}

model Visitor {
  v_id  Int     @id @default(autoincrement())
  nim   String  @unique
  nama  String
  hasil String?
}

